package com.dealretail.helper;

import java.util.Properties;

import javax.annotation.Resource;
import javax.mail.Message.RecipientType;
import javax.mail.MessagingException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

import org.springframework.stereotype.Component;

import com.dealretail.model.Email;

@Component
public class EmailHelper {

	@Resource (name = "emailProps")
	private Properties emailProps;

	@SuppressWarnings("finally")
	public synchronized boolean sendMail(final Email email) {
		boolean sent = false;
		
		// Obtain the default mail session
		Session session = Session.getInstance(emailProps,  
	                new javax.mail.Authenticator() {  
	            protected PasswordAuthentication getPasswordAuthentication() {  
	                return new PasswordAuthentication(email.getSender(), email.getPassword());  
	            }  
	        });  

		session.setDebug(true);

		// Construct the mail message
		try {
			MimeMessage message = new MimeMessage(session);
			message.setText(email.getMessage());
			message.setSubject(email.getSubject());
			message.setFrom(new InternetAddress(email.getSender()));

			if (null != email.getRecipients()
					&& email.getRecipients().length > 0) {
				InternetAddress[] interAddresses = new InternetAddress[email
						.getRecipients().length];

				for (int i = 0; i < email.getRecipients().length; i++) {
					interAddresses[i] = new InternetAddress(
							email.getRecipients()[i]);
				}

				message.addRecipients(RecipientType.TO, interAddresses);
			}

			message.saveChanges();

			// Use Transport to deliver the message
			Transport transport = session.getTransport("smtp");
			transport.connect(emailProps.getProperty("mail.smtp.host"),
					email.getSender(), email.getPassword());

			transport.sendMessage(message, message.getAllRecipients());
			transport.close();
			
			sent = true;

		} catch (MessagingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			return sent;
		}
	}

	public boolean isActive(String emailId) {
		Email email = new Email();
		email.setSender(emailProps.getProperty("mail.smtp.user"));
		email.setPassword(emailProps.getProperty("mail.smtp.user.password"));
		email.setSubject("DealsOnClearance - AutoGenerated - Do not reply");
		email.setMessage("<html><head></head><body><p>Dear Customer, <br/><p>This is automated E-mail to verify your mail account is active or not.</p>"
				+ "<br/><p>Thanks for interested on DealsOnClerance</p><br/><br/>Best Regards,<br/>DOC Admin Team");
		return sendMail(email);
	}
}
